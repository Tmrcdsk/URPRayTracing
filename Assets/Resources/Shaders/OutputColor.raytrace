#pragma max_recursion_depth 11

#include "Common.hlsl"
#include "PRNG.hlsl"

#define MAX_DEPTH (10)
#define NUM_OF_SAMPLES (4)

RWTexture2D<float4> _OutputTarget;
float4 _OutputTargetSize;
int _FrameIndex;

inline float3 BackgroundColor(float3 origin, float3 direction)
{
  float t = 0.5f * (direction.y + 1.0f);
  return (1.0f - t) * float3(1.0f, 1.0f, 1.0f) + t * float3(0.5f, 0.7f, 1.0f);
}

[shader("raygeneration")]
void AntialiasingRayGenShader()
{
    const uint2 dispatchIdx = DispatchRaysIndex().xy;
    const uint PRNGIndex = dispatchIdx.y * (int)_OutputTargetSize.x + dispatchIdx.x;
    uint4 PRNGStates = _PRNGStates[PRNGIndex];
    
    float4 finalColor = float4(0.0f, 0.0f, 0.0f, 0.0f);
    for (int i = 0; i < NUM_OF_SAMPLES; i++)
    {
        float3 origin;
        float3 direction;
        // 使用分层抖动采样来提高抗锯齿质量
        float2 offset = float2(
            (i % 2 + GetRandomValue(PRNGStates)) / 2.0,
            (i / 2 + GetRandomValue(PRNGStates)) / 2.0
        );
        GenerateCameraRayWithOffset(origin, direction, offset);

        RayDesc rayDesc;
        rayDesc.Origin = origin;
        rayDesc.Direction = direction;
        rayDesc.TMin = 1e-5f;
        rayDesc.TMax = _CameraFarDistance;

        RayIntersection rayIntersection;
        rayIntersection.PRNGStates = PRNGStates;
        rayIntersection.color = float4(0.0f, 0.0f, 0.0f, 0.0f);

        TraceRay(_AccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, 0xFF, 0, 1, 0, rayDesc, rayIntersection);
        PRNGStates = rayIntersection.PRNGStates;
        finalColor += rayIntersection.color;
    }
    
    _PRNGStates[PRNGIndex] = PRNGStates;
    if (_FrameIndex > 1)
    {
        float a = 1.0f / (float)_FrameIndex;
        finalColor = _OutputTarget[dispatchIdx] * (1.0f - a) + finalColor * a;
    }
    finalColor /= (float)NUM_OF_SAMPLES;

    _OutputTarget[dispatchIdx] = finalColor;
}

[shader("miss")]
void MissShader(inout RayIntersection rayIntersection : SV_RayPayload)
{
    float3 origin = WorldRayOrigin();
    float3 direction = WorldRayDirection();
    rayIntersection.color = float4(BackgroundColor(origin, direction), 1.0f);
}
